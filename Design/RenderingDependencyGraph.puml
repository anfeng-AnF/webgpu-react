@startuml RenderingDependencyGraph

' Style settings
skinparam class {
    BackgroundColor<<Resource>> LightBlue
    BackgroundColor<<Pass>> LightGreen
    BackgroundColor<<Graph>> LightYellow
    BackgroundColor<<Processor>> LightPink
}

package "RDG" {
    class FRDGBuilder {
        -passes: Map<string, FRDGPass>
        -resources: Map<string, FRDGResource>
        -resourceManager: FResourceManager
        +AddPass(name: string, desc: PassDescriptor): FRDGPass
        +CreateTexture(name: string, desc: TextureDescriptor): FRDGTexture
        +CreateBuffer(name: string, desc: BufferDescriptor): FRDGBuffer
        +CreatePipeline(name: string, desc: PipelineDescriptor): FRDGPipeline
        +CreateBindGroup(name: string, desc: BindGroupDescriptor): FRDGBindGroup
        +GetResource(name: string): FRDGResource
        +GetPass(name: string): FRDGPass
        +Execute(commandEncoder: GPUCommandEncoder)
        -BuildExecutionOrder(): FRDGPass[]
        -AllocateResources()
        -ExecutePasses(commandEncoder: GPUCommandEncoder)
        +CreateShader(name: string, desc: ShaderDescriptor): FRDGShader
        +CreateRenderState(name: string, desc: RenderStateDescriptor): FRDGRenderState
        +ImportResource(name: string, resource: GPUResource): FRDGResource
        +ExportResource(name: string): GPUResource
        +ValidateGraph(): FRDGValidationError[]
    }

    class FRDGResource <<Resource>> {
        #name: string
        #desc: ResourceDescriptor
        #transient: boolean
        #producers: Map<string, FRDGPass>
        #consumers: Map<string, FRDGPass>
        #gpuResource: GPUResource
        +GetName(): string
        +GetGPUResource(): GPUResource
        +AddProducer(pass: FRDGPass)
        +AddConsumer(pass: FRDGPass)
        +IsTransient(): boolean
    }

    class FRDGTexture <<Resource>> {
        -format: GPUTextureFormat
        -width: number
        -height: number
        -usage: GPUTextureUsageFlags
        +CreateView(desc?: GPUTextureViewDescriptor): GPUTextureView
    }

    class FRDGBuffer <<Resource>> {
        -size: number
        -usage: GPUBufferUsageFlags
        +GetBuffer(): GPUBuffer
    }

    class FRDGPipeline <<Resource>> {
        -type: "render" | "compute"
        -layout: GPUPipelineLayout
        -shaderModules: Map<string, GPUShaderModule>
        +GetPipeline(): GPUPipeline
    }

    class FRDGBindGroup <<Resource>> {
        -layout: GPUBindGroupLayout
        -entries: GPUBindGroupEntry[]
        +GetBindGroup(): GPUBindGroup
    }

    class FRDGPass <<Pass>> {
        -name: string
        -inputs: Map<string, FRDGResource>
        -outputs: Map<string, FRDGResource>
        -pipelines: Map<string, FRDGPipeline>
        -bindGroups: Map<string, FRDGBindGroup>
        -executeFn: Function
        -dependencies: Map<string, FRDGPass>
        -meshProcessors: Map<string, FMeshPassProcessor>
        +GetName(): string
        +AddInput(name: string, resource: FRDGResource)
        +AddOutput(name: string, resource: FRDGResource)
        +AddPipeline(name: string, pipeline: FRDGPipeline)
        +AddBindGroup(name: string, bindGroup: FRDGBindGroup)
        +Execute(commandEncoder: GPUCommandEncoder)
        +AddDependency(name: string, pass: FRDGPass)
        +AddMeshProcessor(name: string, processor: FMeshPassProcessor)
        +renderStates: Map<string, FRDGRenderState>
        +barriers: Map<string, GPUMemoryBarrier>
        +AddRenderState(name: string, state: FRDGRenderState)
        +AddBarrier(name: string, barrier: GPUMemoryBarrier)
        +ValidateResources(): boolean
    }

    class FMeshPassProcessor <<Processor>> {
        -name: string
        -pipeline: GPURenderPipeline
        -meshDrawCommands: Map<string, FMeshDrawCommand>
        -viewUniformBuffer: FRDGBuffer
        -objectUniformBuffer: FRDGBuffer
        +GetName(): string
        +ProcessMesh(name: string, mesh: FMesh)
        +Draw(commandEncoder: GPUCommandEncoder)
        +SetupPipeline(desc: PipelineDescriptor)
        +UpdateViewUniforms(data: any)
        +UpdateObjectUniforms(name: string, data: any)
    }

    class FMeshDrawCommand {
        -name: string
        -vertexBuffer: FRDGBuffer
        -indexBuffer: FRDGBuffer
        -instanceBuffer: FRDGBuffer
        -uniformBindGroup: GPUBindGroup
        -indexCount: number
        -instanceCount: number
        +GetName(): string
        +Setup(commandEncoder: GPUCommandEncoder)
        +Draw(commandEncoder: GPUCommandEncoder)
    }

    class FRDGGraph <<Graph>> {
        -passes: Map<string, FRDGPass>
        -resources: Map<string, FRDGResource>
        +AddPass(name: string, pass: FRDGPass)
        +AddResource(name: string, resource: FRDGResource)
        +GetPass(name: string): FRDGPass
        +GetResource(name: string): FRDGResource
        +BuildExecutionOrder(): FRDGPass[]
        -DetectCycles()
        -TopologicalSort(): FRDGPass[]
    }

    class FRDGShader <<Resource>> {
        -type: "vertex" | "fragment" | "compute"
        -code: string
        -entryPoint: string
        +GetShaderModule(): GPUShaderModule
    }

    class FRDGRenderState {
        -colorTargets: GPUColorTargetState[]
        -depthStencil?: GPUDepthStencilState
        -primitive?: GPUPrimitiveState
        -multisample?: GPUMultisampleState
        +Configure(pipeline: GPURenderPipeline)
    }

    class FRDGResourceTransition {
        -resource: FRDGResource
        -oldLayout: GPUTextureLayout | GPUBufferUsage
        -newLayout: GPUTextureLayout | GPUBufferUsage
        -syncScope: GPUScopeFlags
        +Apply(commandEncoder: GPUCommandEncoder)
    }

    class FRDGValidationError {
        -code: number
        -message: string
        -source: string
        -stack: string
    }

    interface IRDGValidator {
        +ValidatePass(pass: FRDGPass): FRDGValidationError[]
        +ValidateResource(resource: FRDGResource): FRDGValidationError[]
        +ValidateGraph(graph: FRDGGraph): FRDGValidationError[]
    }
}

' Relationships
FRDGBuilder --> FRDGPass: creates
FRDGBuilder --> FRDGResource: manages
FRDGBuilder --> FRDGGraph: uses
FRDGBuilder --> FResourceManager: uses

FRDGResource <|-- FRDGTexture
FRDGResource <|-- FRDGBuffer
FRDGResource <|-- FRDGPipeline
FRDGResource <|-- FRDGBindGroup
FRDGResource <|-- FRDGShader

FRDGPass --> FRDGResource: reads/writes
FRDGPass --> FRDGPipeline: uses
FRDGPass --> FRDGBindGroup: uses
FRDGPass --> FRDGPass: depends on
FRDGPass "1" *--> "0..*" FMeshPassProcessor: contains

FMeshPassProcessor "1" *--> "0..*" FMeshDrawCommand: manages
FMeshPassProcessor --> GPURenderPipeline: uses

FRDGGraph --> FRDGPass: contains
FRDGGraph --> FRDGResource: tracks

FRDGPipeline --> FRDGShader: uses
FRDGPipeline --> FRDGRenderState: configures

FRDGPass --> FRDGResourceTransition: manages

FRDGBuilder --> IRDGValidator: uses

@enduml
